#ifndef FuzzyLog_C_bindings_h
#define FuzzyLog_C_bindings_h

/* Generated with cbindgen:0.6.2 */

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdint.h>
#include <stdlib.h>
#include <stdbool.h>

typedef struct DAG DAG;

typedef struct HashMap_order__entry HashMap_order__entry;

typedef HashMap_order__entry SnapBody;

typedef SnapBody *SnapId;

typedef DAG *FLPtr;

typedef uint64_t ColorID;

typedef struct {
    uintptr_t numcolors;
    ColorID *mycolors;
} colors;

/*
 * The specification for a static FuzzyLog server configuration.
 * Since we're using chain-replication the client needs to know of both the
 * head and tail of each replication chain. Each element of an ip array
 * should be in the form `<ip-addr>:<port>`. Currently only ipv4 is supported.
 */
typedef struct {
    uintptr_t num_ips;
    const char *const *head_ips;
    const char *const *tail_ips;
} ServerSpec;

typedef struct {
    uint64_t color;
    uintptr_t numchains;
    const uint64_t *chains;
} ColorSpec;

void delete_snap_id(SnapId snap);

int32_t fuzzylog_append(FLPtr handle,
                        const uint8_t *buf,
                        uintptr_t bufsize,
                        colors *nodecolors);

void fuzzylog_close(FLPtr handle);

SnapId fuzzylog_sync(FLPtr handle, void (*callback)(const uint8_t*, uintptr_t));

void fuzzylog_trim(FLPtr handle, SnapId snap);

/*
 * This should really take in a single color name, and detect chains from the system.
 * However, since we're only statically allocating chains atm, we'll just pass them in.
 */
FLPtr new_fuzzylog_instance(ServerSpec servers,
                            ColorSpec color,
                            SnapId snap);

#endif /* FuzzyLog_C_bindings_h */
